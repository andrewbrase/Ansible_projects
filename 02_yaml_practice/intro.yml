# YAML is a data serialization language
# -converting data into a format that can easily be stored
# -or sent over the network

# For example you could use Python to serialize the 
# data and send it over the network to a Javascript 
# program that will deserialize the data and use it

# Python-> serialize-> yaml-> JS

# everything in YAML is a key-value pair
# aka dictionary/ hash/ object/ map

# an employee record
# ---
# name: Martin
# job: Developer
# employed: True
# foods:
#   - Apple
#   - Orange
#   - Strawberry
#   - Mango
# languages:
#   python: good
#   javascript: good
#   rust: good
# education: |
#   4 GCSEs
#   3 A-Levels
#   BSc in the IoT

# everything in YAML is a key-value pair
# Straberry is a part of this dictionary

# this is a list
# foods:
#   - Apple
#   - Orange
#   - Strawberry
#   - Mango

# the keys are always strings
# values can be anything

# whitespace is a part of YAML formatting
# newlines indicate the end of a field

# you can write it like this

# key and value
# key:
#   company_01:
#     years: 2
#     role: "junior devops"
#   company_02:
#     years: 5
#     role: "sernior devops"
#   company_03:
#     years: 3
#     role: "devops architect"

# yaml vs json

# json format
# Note that in JSON, true and false are lower case, whereas in Python they are capitalized ( True and False )
# JSON everythin needs double quotes
# {
#   "name": "Martin",
#   "job": "Developer",
#   "employed": true,
#   "foods": [
#     "apple",
#     "orange",
#     "strawberry",
#     "mango"
#   ],
#   "languages": {
#     "python": "good",
#     "javascript": "good",
#     "rust": "good"
#   },
#   "education": "4 GCSEs\n3 A-Levels\nBSc in the IoT\n"
# }

# ---
# name: Martin
# job: Developer
# employed: True
# foods:
#   - Apple
#   - Orange
#   - Strawberry
#   - Mango
# languages:
#   Python: good
#   Javascript: good
#   Rust: good
#   # multiline string with the pipe symbol 
# education: |
#   4 GCSEs
#   3 A-Levels
#   BSc in the IoT

# JSON vs Python-Dictionary
# -Json is a data fromat of type: STRING while a 
# Python dictionary is a DATA STRUCTURE

# If you need to exchange data between differnet 2  
# different systems/processes, we could serialize 
# the Python dictionary to a JSON object

# ** JSON is an “object notation” … an encoding for 
# serialization of data and its types. 
# ** A “dictionary” (in Python) is a builtin data type 
# which maps keys to values.
# see example in dict_vs_json

# import json
# employee_0= {
#     "name":"Martin",
#     "Job":"Developer",
#     "Age":31,
#     "employed":True,
# }

# print(type(employee_0))
# # class dict

# # Serializing
# json_object = json.dumps(employee_0)
# print(json_object)
# print(type(json_object))
# # class str

# # --->
# # <class 'dict'>
# # {"name": "Martin", "Job": "Developer", "Age": 31, "employed": true}

# # <class 'str'>

# Usability has made JSON one of the most popular 
# means of serializing data. With it, data can 
# easily be translated from objects into formats 
# that can be stored (for example, in a file) or 
# transmitted (for example, across a network).

# PyYAML python module - see PyYAML.py
# (myprojenv) C:\Users\brasea\Desktop\Workspace\Ansible_projects\02_yaml_practice>py PyYAML.py

# # (INSIDE PYTHON FILE)
# # PyYAML is a YAML parser for Python
# # >pip install pyyaml

# import yaml
# # reading a YAML file

# # open the file as f
# print("\n\n")
# with open('PyYAML.yml') as f:
#     # use the load_all function - it becomes a python dictionary
#     yaml_contents = yaml.load_all(f, Loader=yaml.FullLoader)
#     # for every item in that dictionary -
#     for yaml_content in yaml_contents:
#         # seperate the keys and values
#         for key, value in yaml_content.items():
#             # print the key and value
#             print(f"{key}: {value}")
#     print("\n\n")

# # name: Martin
# # job: Developer
# # employed: True
# # foods: ['Apple', 'Orange', 'Strawberry', 'Mango']
# # languages: {'Python': 'good', 'Javascript': 'good', 'Rust': 'good'}
# # education: 4 GCSEs
# # 3 A-Levels
# # BSc in the IoT

# # The REVERSE of this is converting this python dictionary into a YAML format
# # we achieve that using the dump() function

# # this method will serialize a Python object into
# # a YAML stream, where the Python obect could
# # be a dictionary

# cardict = {
#     'a_list': ["this", "is", "a", "list"], 
#     "car": {
#         "brand": "Ford",
#         "model": "mustang",
#         "year": 1964
#     },
#     "factories": {
#         "building_01": "Illinois",
#         "building_02": "Michigan",
#         "building_03": "Wisconsin"
#     }
# }

# print(type(cardict))
# dict
# <class 'dict'>

# print(yaml.dump(cardict))
# print(type(yaml.dump(cardict)))

# # a_list:
# # - this
# # - is
# # - a
# # - list
# # car:
# #   brand: Ford
# #   model: mustang
# #   year: 1964
# # factories:
# #   building_01: Illinois
# #   building_02: Michigan
# #   building_03: Wisconsin

# # <class 'str'>