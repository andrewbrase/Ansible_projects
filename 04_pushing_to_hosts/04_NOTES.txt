~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* if you have a DNS server you can actually just 
include the hostnames within the hosts file 
instead of the ip addresses
~~~~~~~~~~~~~~~~~~~~~

brasea@ubuntu:~/Desktop/Workspace/ansible_projects$ 
ansible all --key-file ~/.ssh/ans -i inventory.INI -m ping
targetnode01@192.168.19.131 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}

- ansible was able to connect to each of the servers 
and establish a connection

* this was not a ICMP ping, it connected to the servers 
- we are able to communciate with servers with ansible
~~~~~~~~~~~~~~~~~~~~~

*** simple way ***
- command after creating local inventory and setting up 
inventory = inventory
private_key_file = ~/.ssh/ans

in the ansible.cfg file 

~~~~~~~~~~~~~~~~~~~~~
$ ansible all -m ping

brasea@ubuntu:~/Desktop/Workspace/ansible_projects$ ansible all -m ping
targetnode01@192.168.19.131 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
~~~~~~~~~~~~~~~~~~~~~

(listing all of the ansible hosts)
$ ansible all --list-hosts
hosts (1):
    targetnode01@192.168.19.131

~~~~~~~~~~~~~~~~~~~~~
(running the gather facts module with -m)
$ ansible all -m gather_facts

(this command pulls a list of info about a server -
this was excluded due to size)

* You can add --limit <ip address> to the end of the command to 
run on just one of your hosts
~~~~~~~~~~~~~~~~~~~~~
(update all hosts based on Debian)
$ ansible all -m apt -a update_cache=true 
*** this will fail because permmissions denied

$ ansible all -m apt -a update_cache=true --become --ask-become-pass
BECOME password: <sudo password>
targetnode01@192.168.19.131 | CHANGED => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "cache_update_time": 1669040546,
    "cache_updated": true,
    "changed": true
}

-m ~name of module _ 
apt ~module that allows us to work with apt packages on a debian based system
-a ~allows us to use an argument to that module _ 
update_cache=true ~the argument we passed in
--become --ask-become-pass ~allows us to enter sudo password 

> this is equivalent to sudo apt update

~~~~~~~~~~~~~~~~~~~~~
(set up second server)
hosts (2):
    targetnode01@192.168.19.131
    targetnode02@192.168.19.132

BECOME password: 
targetnode02@192.168.19.132 | CHANGED => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "cache_update_time": 1669043324,
    "cache_updated": true,
    "changed": true
}
targetnode01@192.168.19.131 | CHANGED => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "cache_update_time": 1669043324,
    "cache_updated": true,
    "changed": true
}

* this is the documentation on the apt module for ansible
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html

* sending to all hosts install vim-nox text editor
ansible all -m apt -a name=vim-nox --become --ask-become-pass 

which vim
located in /usr/bin
~~~~~~~~~~~~~~~~~~~~~
installs updates on servers
ansible all -m apt -a "upgrade=dist" --become --ask-become-pass

